/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Task,
  TaskCreate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TaskFromJSON,
    TaskToJSON,
    TaskCreateFromJSON,
    TaskCreateToJSON,
} from '../models/index';

export interface CreateTaskApiV1TasksCreatePostRequest {
    taskCreate: TaskCreate;
}

export interface DeleteTaskApiV1TasksDeleteTaskIdDeleteRequest {
    taskId: number;
}

export interface GetTaskApiV1TasksDetailTaskIdGetRequest {
    taskId: number;
}

export interface GetTasksApiV1TasksListGetRequest {
    title?: string;
    status?: number;
}

export interface UpdateTaskApiV1TasksUpdateTaskIdPutRequest {
    taskId: number;
    task: Task;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 作成 :param task_schema: :param session: :return:
     * Create Task
     */
    async createTaskApiV1TasksCreatePostRaw(requestParameters: CreateTaskApiV1TasksCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters['taskCreate'] == null) {
            throw new runtime.RequiredError(
                'taskCreate',
                'Required parameter "taskCreate" was null or undefined when calling createTaskApiV1TasksCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tasks/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCreateToJSON(requestParameters['taskCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * 作成 :param task_schema: :param session: :return:
     * Create Task
     */
    async createTaskApiV1TasksCreatePost(requestParameters: CreateTaskApiV1TasksCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.createTaskApiV1TasksCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 削除 :param task_id: :param session: :return:
     * Delete Task
     */
    async deleteTaskApiV1TasksDeleteTaskIdDeleteRaw(requestParameters: DeleteTaskApiV1TasksDeleteTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling deleteTaskApiV1TasksDeleteTaskIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tasks/delete/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 削除 :param task_id: :param session: :return:
     * Delete Task
     */
    async deleteTaskApiV1TasksDeleteTaskIdDelete(requestParameters: DeleteTaskApiV1TasksDeleteTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteTaskApiV1TasksDeleteTaskIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 詳細を取得 :param task_id: :return:
     * Get Task
     */
    async getTaskApiV1TasksDetailTaskIdGetRaw(requestParameters: GetTaskApiV1TasksDetailTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getTaskApiV1TasksDetailTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tasks/detail/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * 詳細を取得 :param task_id: :return:
     * Get Task
     */
    async getTaskApiV1TasksDetailTaskIdGet(requestParameters: GetTaskApiV1TasksDetailTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.getTaskApiV1TasksDetailTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 一覧を取得 :param title: :param status: :return:
     * Get Tasks
     */
    async getTasksApiV1TasksListGetRaw(requestParameters: GetTasksApiV1TasksListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Task>>> {
        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tasks/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * 一覧を取得 :param title: :param status: :return:
     * Get Tasks
     */
    async getTasksApiV1TasksListGet(requestParameters: GetTasksApiV1TasksListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Task>> {
        const response = await this.getTasksApiV1TasksListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * テスト :return:
     * Test
     */
    async testGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * テスト :return:
     * Test
     */
    async testGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.testGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 更新 :param task_schema: :param task_id: :param session: :return:
     * Update Task
     */
    async updateTaskApiV1TasksUpdateTaskIdPutRaw(requestParameters: UpdateTaskApiV1TasksUpdateTaskIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling updateTaskApiV1TasksUpdateTaskIdPut().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling updateTaskApiV1TasksUpdateTaskIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tasks/update/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters['task']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * 更新 :param task_schema: :param task_id: :param session: :return:
     * Update Task
     */
    async updateTaskApiV1TasksUpdateTaskIdPut(requestParameters: UpdateTaskApiV1TasksUpdateTaskIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.updateTaskApiV1TasksUpdateTaskIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
