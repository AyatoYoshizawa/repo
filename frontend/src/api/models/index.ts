/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HTTPValidationError}
 */
export function createHTTPValidationErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHTTPValidationError;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TaskCreate}
 */
export function createTaskCreateFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTaskCreate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Task}
 */
export function createTaskFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTask;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ValidationError}
 */
export function createValidationErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoValidationError;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoHTTPValidationError(hTTPValidationError: Partial<HTTPValidationError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { hTTPValidationError.detail = n.getCollectionOfObjectValues<ValidationError>(createValidationErrorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTask(task: Partial<Task> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { task.id = n.getNumberValue(); },
        "status": n => { task.status = n.getNumberValue(); },
        "title": n => { task.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTaskCreate(taskCreate: Partial<TaskCreate> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "status": n => { taskCreate.status = n.getNumberValue(); },
        "title": n => { taskCreate.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoValidationError(validationError: Partial<ValidationError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "loc": n => { validationError.loc = n.getCollectionOfPrimitiveValues<string>(); },
        "msg": n => { validationError.msg = n.getStringValue(); },
        "type": n => { validationError.type = n.getStringValue(); },
    }
}
export interface HTTPValidationError extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: ValidationError[];
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHTTPValidationError(writer: SerializationWriter, hTTPValidationError: Partial<HTTPValidationError> | undefined = {}) : void {
    writer.writeCollectionOfObjectValues<ValidationError>("detail", hTTPValidationError.detail, serializeValidationError);
    writer.writeAdditionalData(hTTPValidationError.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTask(writer: SerializationWriter, task: Partial<Task> | undefined = {}) : void {
    writer.writeNumberValue("id", task.id);
    writer.writeNumberValue("status", task.status);
    writer.writeStringValue("title", task.title);
    writer.writeAdditionalData(task.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskCreate(writer: SerializationWriter, taskCreate: Partial<TaskCreate> | undefined = {}) : void {
    writer.writeNumberValue("status", taskCreate.status);
    writer.writeStringValue("title", taskCreate.title);
    writer.writeAdditionalData(taskCreate.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeValidationError(writer: SerializationWriter, validationError: Partial<ValidationError> | undefined = {}) : void {
    writer.writeCollectionOfPrimitiveValues<string>("loc", validationError.loc);
    writer.writeStringValue("msg", validationError.msg);
    writer.writeStringValue("type", validationError.type);
    writer.writeAdditionalData(validationError.additionalData);
}
/**
 * データベースに永続化されたものなので id が存在する
 */
export interface Task extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: number;
    /**
     * The status property
     */
    status?: number;
    /**
     * The title property
     */
    title?: string;
}
/**
 * 作成リクエストのデータ受取用（つまり、まだデータベースに永続化されていない）ので id が不在のもの
 */
export interface TaskCreate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The status property
     */
    status?: number;
    /**
     * The title property
     */
    title?: string;
}
export interface ValidationError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The loc property
     */
    loc?: string[];
    /**
     * The msg property
     */
    msg?: string;
    /**
     * The type property
     */
    type?: string;
}
/* tslint:enable */
/* eslint-enable */
