/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHTTPValidationErrorFromDiscriminatorValue, createTaskFromDiscriminatorValue, serializeTask, serializeTaskCreate, type HTTPValidationError, type Task, type TaskCreate } from '../../../../models/';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/v1/tasks/create
 */
export interface CreateRequestBuilder extends BaseRequestBuilder<CreateRequestBuilder> {
    /**
     * 作成:param task_schema::param session::return:
     * @param body 作成リクエストのデータ受取用（つまり、まだデータベースに永続化されていない）ので id が不在のもの
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Task>}
     * @throws {HTTPValidationError} error when the service returns a 422 status code
     */
     post(body: TaskCreate, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Task | undefined>;
    /**
     * 作成:param task_schema::param session::return:
     * @param body 作成リクエストのデータ受取用（つまり、まだデータベースに永続化されていない）ので id が不在のもの
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TaskCreate, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const CreateRequestBuilderUriTemplate = "{+baseurl}/api/v1/tasks/create";
/**
 * Metadata for all the requests in the request builder.
 */
export const CreateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CreateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            422: createHTTPValidationErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTaskFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTaskCreate,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
